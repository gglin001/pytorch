[2023-07-20 08:01:20,885] torch._dynamo.eval_frame: [DEBUG] skipping __init__ /opt/conda/envs/pyenv/lib/python3.8/contextlib.py
[2023-07-20 08:01:20,885] torch._dynamo.eval_frame: [DEBUG] skipping __enter__ /opt/conda/envs/pyenv/lib/python3.8/contextlib.py
[2023-07-20 08:01:20,885] torch._dynamo.eval_frame: [DEBUG] skipping helper /opt/conda/envs/pyenv/lib/python3.8/contextlib.py
[2023-07-20 08:01:20,885] torch._dynamo.eval_frame: [DEBUG] skipping __init__ /opt/conda/envs/pyenv/lib/python3.8/contextlib.py
[2023-07-20 08:01:20,885] torch._dynamo.eval_frame: [DEBUG] skipping __enter__ /opt/conda/envs/pyenv/lib/python3.8/contextlib.py
[2023-07-20 08:01:20,885] torch._dynamo.eval_frame: [DEBUG] skipping enable_dynamic /repos/gglin001/pytorch/torch/_dynamo/eval_frame.py
[2023-07-20 08:01:20,886] torch._utils_internal: [INFO] dynamo _convert_frame_assert._compile: {'co_name': 'func', 'co_filename': 'slide/examples/onnxrt_add.py', 'co_firstlineno': 14, 'cache_size': 0}
[2023-07-20 08:01:20,886] torch._dynamo.symbolic_convert: [INFO] Step 1: torchdynamo start tracing func slide/examples/onnxrt_add.py:14
[2023-07-20 08:01:20,886] torch.fx.experimental.symbolic_shapes: [INFO] 0.0: create_env
[2023-07-20 08:01:20,886] torch._subclasses.fake_tensor: [DEBUG] create_mode 0x7f5cf9715760
TRACE starts_line func slide/examples/onnxrt_add.py:14
    def func(a, b):
[2023-07-20 08:01:20,905] torch._dynamo.variables.builder: [DEBUG] wrap_to_fake L['a'] (2,) [<DimDynamic.STATIC: 2>] [None]
[2023-07-20 08:01:20,905] torch._dynamo.variables.builder: [DEBUG] wrap_to_fake L['b'] (2,) [<DimDynamic.STATIC: 2>] [None]
TRACE starts_line func slide/examples/onnxrt_add.py:15
        c = a + b
[2023-07-20 08:01:20,906] torch._dynamo.symbolic_convert: [DEBUG] TRACE LOAD_FAST a []
[2023-07-20 08:01:20,906] torch._dynamo.symbolic_convert: [DEBUG] TRACE LOAD_FAST b [TensorVariable()]
[2023-07-20 08:01:20,906] torch._dynamo.symbolic_convert: [DEBUG] TRACE BINARY_ADD None [TensorVariable(), TensorVariable()]
[2023-07-20 08:01:20,906] torch._subclasses.fake_tensor: [DEBUG] FakeTensorMode.__torch_dispatch__: aten.add.Tensor
[2023-07-20 08:01:20,907] torch._dynamo.symbolic_convert: [DEBUG] TRACE STORE_FAST c [TensorVariable()]
TRACE starts_line func slide/examples/onnxrt_add.py:16
        return c
[2023-07-20 08:01:20,908] torch._dynamo.symbolic_convert: [DEBUG] TRACE LOAD_FAST c []
[2023-07-20 08:01:20,908] torch._dynamo.symbolic_convert: [DEBUG] TRACE RETURN_VALUE None [TensorVariable()]
[2023-07-20 08:01:20,908] torch._dynamo.symbolic_convert: [INFO] Step 1: torchdynamo done tracing func (RETURN_VALUE)
[2023-07-20 08:01:20,908] torch._dynamo.symbolic_convert: [DEBUG] RETURN_VALUE triggered compile
[2023-07-20 08:01:20,908] torch._dynamo.output_graph: [DEBUG] COMPILING GRAPH due to GraphCompileReason(reason='return_value', user_stack=[<FrameSummary file slide/examples/onnxrt_add.py, line 16 in func>], graph_break=False)
TRACED GRAPH
 ===== __compiled_fn_0 =====
 <eval_with_key>.0 class GraphModule(torch.nn.Module):
    def forward(self, L_a_ : torch.Tensor, L_b_ : torch.Tensor):
        l_a_ = L_a_
        l_b_ = L_b_
        
        # File: slide/examples/onnxrt_add.py:15, code: c = a + b
        add = l_a_ + l_b_;  l_a_ = l_b_ = None
        return (add,)
        

TRACED GRAPH
 __compiled_fn_0 <eval_with_key>.0 opcode         name    target                   args          kwargs
-------------  ------  -----------------------  ------------  --------
placeholder    l_a_    L_a_                     ()            {}
placeholder    l_b_    L_b_                     ()            {}
call_function  add     <built-in function add>  (l_a_, l_b_)  {}
output         output  output                   ((add,),)     {}

TRACED GRAPH TENSOR SIZES
===== __compiled_fn_0 =====
l_a_: (2,)
l_b_: (2,)
add: (2,)

[2023-07-20 08:01:20,911] torch._dynamo.output_graph: [INFO] Step 2: calling compiler function onnxrt
/repos/gglin001/pytorch/torch/jit/_check.py:172: UserWarning: The TorchScript type system doesn't support instance-level annotations on empty non-base types in `__init__`. Instead, either 1) use a type annotation in the class body, or 2) wrap the type in `torch.jit.Attribute`.
  warnings.warn("The TorchScript type system doesn't support "
[2023-07-20 08:01:20,957] torch._dynamo.output_graph: [INFO] Step 2: done compiler function onnxrt
ORIGINAL BYTECODE func slide/examples/onnxrt_add.py line 14 
 15           0 LOAD_FAST                0 (a)
              2 LOAD_FAST                1 (b)
              4 BINARY_ADD
              6 STORE_FAST               2 (c)

 16           8 LOAD_FAST                2 (c)
             10 RETURN_VALUE


MODIFIED BYTECODE func slide/examples/onnxrt_add.py line 14 
 14           0 LOAD_GLOBAL              0 (__compiled_fn_0)
              2 LOAD_FAST                0 (a)
              4 LOAD_FAST                1 (b)
              6 CALL_FUNCTION            2
              8 UNPACK_SEQUENCE          1
             10 RETURN_VALUE


[2023-07-20 08:01:20,986] torch.fx.experimental.symbolic_shapes: [INFO] 0.0: produce_guards
[2023-07-20 08:01:20,986] torch.fx.experimental.symbolic_shapes: [DEBUG] 0.0: Skipping guard L['a'].size()[0] == 2
[2023-07-20 08:01:20,986] torch.fx.experimental.symbolic_shapes: [DEBUG] 0.0: Skipping guard L['a'].stride()[0] == 1
[2023-07-20 08:01:20,986] torch.fx.experimental.symbolic_shapes: [DEBUG] 0.0: Skipping guard L['a'].storage_offset() == 0
[2023-07-20 08:01:20,986] torch.fx.experimental.symbolic_shapes: [DEBUG] 0.0: Skipping guard L['b'].size()[0] == 2
[2023-07-20 08:01:20,986] torch.fx.experimental.symbolic_shapes: [DEBUG] 0.0: Skipping guard L['b'].stride()[0] == 1
[2023-07-20 08:01:20,986] torch.fx.experimental.symbolic_shapes: [DEBUG] 0.0: Skipping guard L['b'].storage_offset() == 0
[2023-07-20 08:01:20,987] torch._utils_internal: [INFO] dynamic produce_guards: {'co_name': 'func', 'co_filename': 'slide/examples/onnxrt_add.py', 'co_firstlineno': 14, 'num_guards': 0, 'free_symbols': 0}
GUARDS:
  hasattr(L['a'], '_dynamo_dynamic_indices') == False
  hasattr(L['b'], '_dynamo_dynamic_indices') == False
  not ___is_grad_enabled()
  not ___are_deterministic_algorithms_enabled()
  ___is_torch_function_enabled()
  utils_device.CURRENT_DEVICE == None
[2023-07-20 08:01:20,990] torch._dynamo.eval_frame: [DEBUG] skipping _fn /repos/gglin001/pytorch/torch/_dynamo/eval_frame.py
[2023-07-20 08:01:20,990] torch._dynamo.eval_frame: [DEBUG] skipping nothing /repos/gglin001/pytorch/torch/_dynamo/eval_frame.py
[2023-07-20 08:01:20,990] torch._dynamo.eval_frame: [DEBUG] skipping __exit__ /opt/conda/envs/pyenv/lib/python3.8/contextlib.py
[2023-07-20 08:01:20,990] torch._dynamo.eval_frame: [DEBUG] skipping __exit__ /opt/conda/envs/pyenv/lib/python3.8/contextlib.py
========= Diagnostic Run torch.onnx.export version 2.1.0a0+gitdfc9874 ==========
verbose: False, log level: 40
======================= 0 NONE 0 NOTE 0 WARNING 0 ERROR ========================

out: tensor([ 1.4550, -0.3285])
raw_out: tensor([ 1.4550, -0.3285])
[2023-07-20 08:01:20,991] torch._dynamo.utils: [INFO] TorchDynamo compilation metrics:
[2023-07-20 08:01:20,991] torch._dynamo.utils: [INFO] Function                          Runtimes (s)
[2023-07-20 08:01:20,991] torch._dynamo.utils: [INFO] ------------------------------  --------------
[2023-07-20 08:01:20,991] torch._dynamo.utils: [INFO] _compile                                0.1038
[2023-07-20 08:01:20,991] torch._dynamo.utils: [INFO] OutputGraph.call_user_compiler          0.0461
